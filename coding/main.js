// Generated by CoffeeScript 1.10.0
(function() {
    var Q, app, environment, express, host, http, io, isDebug, logger, path, pkg, port, port_discover, pwuid, server, shux, sio;

    Q = require('q');

    shux = require('shux');

    sio = require('socket.io');

    express = require('express');

    http = require('http');

    pwuid = require('pwuid');

    path = require('path');

    logger = require('./logger');

    pkg = require('../package.json');

    port_discover = require('./port_discover');

    environment = process.env.TTY_ENV;

    isDebug = environment === void 0 || environment === 'development';

    host = process.env.TTY_HOST || "0.0.0.0";

    port = process.env.TTY_PORT || 5000;

    app = express();

    app.get('/open', function(req, res) {
        var i, len, ref, shells, sid, socket, tty;
        if (req.ip !== '127.0.0.1') {
            res.send("Bad Request, Your IP is Limited\n");
            return;
        }
        if (!req.query.port) {
            res.send("Bad Request, Port not defined\n");
            return;
        }
        if (!req.query.sid) {
            res.send("Bad Request, SID not defined\n");
            return;
        }
        port = parseInt(req.query.port);
        sid = parseInt(req.query.sid);
        if (!port) {
            res.send("Not a Port\n");
            return;
        }
        if (!io.sockets.sockets[0]) {
            res.send("No Sockets(s)\n");
            return;
        }
        ref = io.sockets.sockets;
        for (i = 0, len = ref.length; i < len; i++) {
            socket = ref[i];
            if (socket.shx) {
                shells = socket.shx.shells;
                for (tty in shells) {
                    if (parseInt(shells[tty].ps.pid) === sid) {
                        socket.emit('port.open', port);
                        res.send("ok\n");
                        return;
                    }
                }
            }
        }
        return res.send("No Client(s)\n");
    });

    if (isDebug) {
        app.use(express["static"](path.resolve(__dirname, '../static')));
    }

    server = http.createServer(app);

    io = sio.listen(server, {
        path: "/" + pkg.name
    });

    io.sockets.on('connection', function(socket) {
        var lastPort, portDiscovery, shx;
        if (isDebug) {
            logger.info('A socket connected!');
        }
        shx = shux();
        socket.shx = shx;
        shx.on('exit', function(id) {
            if (isDebug) {
                logger.info("shell id=" + id + " exited.");
            }
            return socket.emit("shell.exit", {
                id: id
            });
        });
        shx.on('spawn', function(id) {
            var ref;
            return (ref = shx.shells[id]) != null ? ref.ps.pause() : void 0;
        });
        lastPort = "";
        portDiscovery = setInterval(function() {
            return port_discover(function(data) {
                var cdata;
                cdata = JSON.stringify(data);
                if (cdata !== lastPort) {
                    socket.emit("port.found", data);
                    lastPort = cdata;
                    if (isDebug) {
                        return logger.info("port found " + cdata);
                    }
                }
            });
        }, 3000);
        socket.on('term.open', function(data) {
            var args, cmd, cols, cwd, dup, id, rows, shell;
            id = data.id, cols = data.cols, rows = data.rows, cmd = data.cmd, cwd = data.cwd, args = data.args;
            dup = shx.createShell(id, {
                command: cmd || pwuid().shell,
                "arguments": args || ['-l', '-i'],
                cwd: cwd || process.env.HOME
            });
            if (isDebug) {
                logger.info("shell id=" + id + " created.");
            }
            socket.shx = shx;
            shell = shx.shells[id];
            shell.ps.resize(cols, rows);
            return dup.on('data', function(data) {
                var msg;
                msg = {
                    id: id,
                    output: data
                };
                return socket.emit("shell.output", msg);
            });
        });
        socket.on('disconnect', function() {
            var i, id, len, ref;
            ref = shx.list();
            for (i = 0, len = ref.length; i < len; i++) {
                id = ref[i];
                shx.destroy(id);
                if (isDebug) {
                    logger.info("shell id=" + id + " destroyed.");
                }
            }
            clearInterval(portDiscovery);
            lastPort = void 0;
            if (isDebug) {
                return logger.info("socket disconnected");
            }
        });
        socket.on('term.input', function(data) {
            var shell;
            shell = shx.shells[data.id];
            if (shell) {
                return shell.ps.write(data.input);
            }
        });
        socket.on('term.resize', function(data) {
            var shell;
            shell = shx.shells[data.id];
            if (shell) {
                shell.ps.resize(data.cols, data.rows);
            }
            if (isDebug) {
                return logger.info("shell id=" + data.id + " resize " + data.cols + ", " + data.rows);
            }
        });
        return socket.on('term.close', function(data) {
            shx.destroy(data.id);
            if (isDebug) {
                return logger.info("shell id=" + data.id + " destroyed.");
            }
        });
    });

    server.listen(port, host, function() {
        return logger.info("TTY Server Listening on %s:%d", host, port);
    });

}).call(this);
